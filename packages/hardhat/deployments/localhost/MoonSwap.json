{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_swapId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outTokens",
          "type": "uint256"
        }
      ],
      "name": "commitToSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_outToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outTokens",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOutParty",
          "type": "address"
        }
      ],
      "name": "createNewSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "outToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "inTokenParty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenParty",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb055df0c457ada1241ecc6a08a85c35d69a5fb4bdcdf34c2cfc08dfed08f1fe8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "941178",
    "logsBloom": "0x
    "blockHash": "0xf4750493bd11d3f856d407185b51efbaaadbaf1eaae0eab5f5f2d82fdee89abb",
    "transactionHash": "0xb055df0c457ada1241ecc6a08a85c35d69a5fb4bdcdf34c2cfc08dfed08f1fe8",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "941178",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4f615649ec28d3bd9825e319387620cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outTokens\",\"type\":\"uint256\"}],\"name\":\"commitToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOutParty\",\"type\":\"address\"}],\"name\":\"createNewSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inTokenParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenParty\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MoonSwapV1.sol\":\"MoonSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"contracts/MoonSwapV1.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract MoonSwap is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    struct Swap {\\r\\n        IERC20 inToken;\\r\\n        IERC20 outToken;\\r\\n        uint256 tokensIn;\\r\\n        uint256 tokensOut; // can be swapped for tokensOut or more\\r\\n        address inTokenParty;\\r\\n        address outTokenParty;\\r\\n        bool status;\\r\\n    }\\r\\n\\r\\n    Counters.Counter public swapId;\\r\\n    mapping(uint256 => Swap) public swaps;\\r\\n    mapping(address => uint256) public claimableFees;\\r\\n    address public admin;\\r\\n\\r\\n    constructor() {\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    function claimFees(IERC20 _token) external {\\r\\n        _token.safeTransfer(admin, claimableFees[address(_token)]);\\r\\n    }\\r\\n\\r\\n    function createNewSwap(\\r\\n        IERC20 _inToken,\\r\\n        IERC20 _outToken,\\r\\n        uint256 _inTokens,\\r\\n        uint256 _outTokens,\\r\\n        address _tokenOutParty)\\r\\n        external\\r\\n        returns (uint256) {\\r\\n        _inToken.safeTransferFrom(msg.sender, address(this), _inTokens);\\r\\n        uint256 fee = (5*_inTokens)/1000;\\r\\n        claimableFees[address(_inToken)] += fee;\\r\\n        Swap memory newSwap = Swap(\\r\\n            _inToken, // inToken\\r\\n            _outToken, // outToken\\r\\n            _inTokens - fee, // tokensIn\\r\\n            _outTokens, // tokensOut\\r\\n            msg.sender, // tokensInParty\\r\\n            _tokenOutParty, // tokensOutParty\\r\\n            false // status\\r\\n        );\\r\\n        swaps[swapId.current()] = newSwap;\\r\\n        swapId.increment();\\r\\n        return swapId.current() - 1;\\r\\n    }\\r\\n\\r\\n    function commitToSwap(uint256 _swapId, uint256 _outTokens) external nonReentrant returns (uint256) {\\r\\n        Swap memory newSwap = swaps[_swapId];\\r\\n        require(newSwap.status, \\\"SWAP_INACTIVE\\\");\\r\\n        require(newSwap.outTokenParty == msg.sender || newSwap.outTokenParty == address(0), \\\"UNAUTHORIZED\\\");\\r\\n        require(_outTokens >= newSwap.tokensOut, \\\"UNMATCHED_AMOUNT\\\");\\r\\n        newSwap.outToken.safeTransferFrom(msg.sender, address(this), _outTokens);\\r\\n        uint256 fee = (5*_outTokens)/1000;\\r\\n        claimableFees[address(newSwap.outToken)] += fee;\\r\\n        delete swaps[_swapId]; // get those sweet gas refunds!\\r\\n        newSwap.outToken.safeTransfer(newSwap.inTokenParty, _outTokens - fee);\\r\\n        newSwap.inToken.safeTransfer(msg.sender, newSwap.tokensIn);\\r\\n        return newSwap.tokensIn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x971589a447e7b0845b9b29a66cbf089f4751a8f1e561f4ebcbaf76ff023132c9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055600480546001600160a01b03191633179055610f62806100376000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b82491f11161005b578063b82491f1146100dd578063f09c5829146100f0578063f54738ef146101c1578063f851a440146101cb57600080fd5b806315a0ea6a146100825780635ec169a0146100975780637e0b2492146100bd575b600080fd5b610095610090366004610ce4565b610210565b005b6100aa6100a5366004610d01565b61024c565b6040519081526020015b60405180910390f35b6100aa6100cb366004610ce4565b60036020526000908152604090205481565b6100aa6100eb366004610d23565b610664565b61016e6100fe366004610d82565b600260208190526000918252604090912080546001820154928201546003830154600484015460059094015473ffffffffffffffffffffffffffffffffffffffff938416958416949293919282169181169074010000000000000000000000000000000000000000900460ff1687565b6040805173ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015286019490945260608501929092528416608084015290921660a082015290151560c082015260e0016100b4565b6001546100aa9081565b6004546101eb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b4565b60045473ffffffffffffffffffffffffffffffffffffffff8281166000818152600360205260409020546102499391929091169061088d565b50565b6000600260005414156102c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260008181558481526020828152604091829020825160e081018452815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169382019390935293810154928401929092526003820154606084015260048201548116608084015260059091015490811660a083015274010000000000000000000000000000000000000000900460ff16151560c082018190526103c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f535741505f494e4143544956450000000000000000000000000000000000000060448201526064016102b7565b60a081015173ffffffffffffffffffffffffffffffffffffffff16331480610400575060a081015173ffffffffffffffffffffffffffffffffffffffff16155b610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016102b7565b80606001518310156104d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e4d4154434845445f414d4f554e540000000000000000000000000000000060448201526064016102b7565b60208101516104fb9073ffffffffffffffffffffffffffffffffffffffff16333086610966565b60006103e861050b856005610dca565b6105159190610e07565b90508060036000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056a9190610e42565b90915550506000858152600260208190526040822080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168255600182018054821690559181018390556003810192909255600482018054909116905560050180547fffffffffffffffffffffff0000000000000000000000000000000000000000001690556080820151610628906106068387610e5a565b602085015173ffffffffffffffffffffffffffffffffffffffff16919061088d565b604082015182516106539173ffffffffffffffffffffffffffffffffffffffff90911690339061088d565b506040015160016000559392505050565b600061068873ffffffffffffffffffffffffffffffffffffffff8716333087610966565b60006103e8610698866005610dca565b6106a29190610e07565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600360205260408120805492935083929091906106dc908490610e42565b90915550506040805160e08101825273ffffffffffffffffffffffffffffffffffffffff808a16825288166020820152600091810161071b8489610e5a565b81526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001600015158152509050806002600061077560015490565b815260208082019290925260409081016000208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178355938501516001808401805492841692871692909217909155928501516002830155606085015160038301556080850151600483018054918316919095161790935560a08401516005909101805460c090950151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090951691909316179290921790556108739080546001019055565b600180546108819190610e5a565b98975050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526109619084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526109ca565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109c49085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016108df565b50505050565b6000610a2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ad69092919063ffffffff16565b8051909150156109615780806020019051810190610a4a9190610e71565b610961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102b7565b6060610ae58484600085610aef565b90505b9392505050565b606082471015610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102b7565b843b610be9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102b7565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c129190610ebf565b60006040518083038185875af1925050503d8060008114610c4f576040519150601f19603f3d011682016040523d82523d6000602084013e610c54565b606091505b5091509150610c64828286610c6f565b979650505050505050565b60608315610c7e575081610ae8565b825115610c8e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b79190610edb565b73ffffffffffffffffffffffffffffffffffffffff8116811461024957600080fd5b600060208284031215610cf657600080fd5b8135610ae881610cc2565b60008060408385031215610d1457600080fd5b50508035926020909101359150565b600080600080600060a08688031215610d3b57600080fd5b8535610d4681610cc2565b94506020860135610d5681610cc2565b935060408601359250606086013591506080860135610d7481610cc2565b809150509295509295909350565b600060208284031215610d9457600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0257610e02610d9b565b500290565b600082610e3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115610e5557610e55610d9b565b500190565b600082821015610e6c57610e6c610d9b565b500390565b600060208284031215610e8357600080fd5b81518015158114610ae857600080fd5b60005b83811015610eae578181015183820152602001610e96565b838111156109c45750506000910152565b60008251610ed1818460208701610e93565b9190910192915050565b6020815260008251806020840152610efa816040850160208701610e93565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212206c9fbadf316b463c2f75aba7e1935a0304b4bf825fcad7ca645c33f356d556e864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b82491f11161005b578063b82491f1146100dd578063f09c5829146100f0578063f54738ef146101c1578063f851a440146101cb57600080fd5b806315a0ea6a146100825780635ec169a0146100975780637e0b2492146100bd575b600080fd5b610095610090366004610ce4565b610210565b005b6100aa6100a5366004610d01565b61024c565b6040519081526020015b60405180910390f35b6100aa6100cb366004610ce4565b60036020526000908152604090205481565b6100aa6100eb366004610d23565b610664565b61016e6100fe366004610d82565b600260208190526000918252604090912080546001820154928201546003830154600484015460059094015473ffffffffffffffffffffffffffffffffffffffff938416958416949293919282169181169074010000000000000000000000000000000000000000900460ff1687565b6040805173ffffffffffffffffffffffffffffffffffffffff9889168152968816602088015286019490945260608501929092528416608084015290921660a082015290151560c082015260e0016100b4565b6001546100aa9081565b6004546101eb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b4565b60045473ffffffffffffffffffffffffffffffffffffffff8281166000818152600360205260409020546102499391929091169061088d565b50565b6000600260005414156102c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260008181558481526020828152604091829020825160e081018452815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169382019390935293810154928401929092526003820154606084015260048201548116608084015260059091015490811660a083015274010000000000000000000000000000000000000000900460ff16151560c082018190526103c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f535741505f494e4143544956450000000000000000000000000000000000000060448201526064016102b7565b60a081015173ffffffffffffffffffffffffffffffffffffffff16331480610400575060a081015173ffffffffffffffffffffffffffffffffffffffff16155b610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016102b7565b80606001518310156104d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f554e4d4154434845445f414d4f554e540000000000000000000000000000000060448201526064016102b7565b60208101516104fb9073ffffffffffffffffffffffffffffffffffffffff16333086610966565b60006103e861050b856005610dca565b6105159190610e07565b90508060036000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056a9190610e42565b90915550506000858152600260208190526040822080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081168255600182018054821690559181018390556003810192909255600482018054909116905560050180547fffffffffffffffffffffff0000000000000000000000000000000000000000001690556080820151610628906106068387610e5a565b602085015173ffffffffffffffffffffffffffffffffffffffff16919061088d565b604082015182516106539173ffffffffffffffffffffffffffffffffffffffff90911690339061088d565b506040015160016000559392505050565b600061068873ffffffffffffffffffffffffffffffffffffffff8716333087610966565b60006103e8610698866005610dca565b6106a29190610e07565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600360205260408120805492935083929091906106dc908490610e42565b90915550506040805160e08101825273ffffffffffffffffffffffffffffffffffffffff808a16825288166020820152600091810161071b8489610e5a565b81526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001600015158152509050806002600061077560015490565b815260208082019290925260409081016000208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178355938501516001808401805492841692871692909217909155928501516002830155606085015160038301556080850151600483018054918316919095161790935560a08401516005909101805460c090950151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090951691909316179290921790556108739080546001019055565b600180546108819190610e5a565b98975050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526109619084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526109ca565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109c49085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016108df565b50505050565b6000610a2c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ad69092919063ffffffff16565b8051909150156109615780806020019051810190610a4a9190610e71565b610961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102b7565b6060610ae58484600085610aef565b90505b9392505050565b606082471015610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102b7565b843b610be9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102b7565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c129190610ebf565b60006040518083038185875af1925050503d8060008114610c4f576040519150601f19603f3d011682016040523d82523d6000602084013e610c54565b606091505b5091509150610c64828286610c6f565b979650505050505050565b60608315610c7e575081610ae8565b825115610c8e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b79190610edb565b73ffffffffffffffffffffffffffffffffffffffff8116811461024957600080fd5b600060208284031215610cf657600080fd5b8135610ae881610cc2565b60008060408385031215610d1457600080fd5b50508035926020909101359150565b600080600080600060a08688031215610d3b57600080fd5b8535610d4681610cc2565b94506020860135610d5681610cc2565b935060408601359250606086013591506080860135610d7481610cc2565b809150509295509295909350565b600060208284031215610d9457600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0257610e02610d9b565b500290565b600082610e3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115610e5557610e55610d9b565b500190565b600082821015610e6c57610e6c610d9b565b500390565b600060208284031215610e8357600080fd5b81518015158114610ae857600080fd5b60005b83811015610eae578181015183820152602001610e96565b838111156109c45750506000910152565b60008251610ed1818460208701610e93565b9190910192915050565b6020815260008251806020840152610efa816040850160208701610e93565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212206c9fbadf316b463c2f75aba7e1935a0304b4bf825fcad7ca645c33f356d556e864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/MoonSwapV1.sol:MoonSwap",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1341,
        "contract": "contracts/MoonSwapV1.sol:MoonSwap",
        "label": "swapId",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1237_storage"
      },
      {
        "astId": 1346,
        "contract": "contracts/MoonSwapV1.sol:MoonSwap",
        "label": "swaps",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Swap)1338_storage)"
      },
      {
        "astId": 1350,
        "contract": "contracts/MoonSwapV1.sol:MoonSwap",
        "label": "claimableFees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1352,
        "contract": "contracts/MoonSwapV1.sol:MoonSwap",
        "label": "admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Swap)1338_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MoonSwap.Swap)",
        "numberOfBytes": "32",
        "value": "t_struct(Swap)1338_storage"
      },
      "t_struct(Counter)1237_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1236,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Swap)1338_storage": {
        "encoding": "inplace",
        "label": "struct MoonSwap.Swap",
        "members": [
          {
            "astId": 1324,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "inToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 1327,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "outToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 1329,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "tokensIn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1331,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "tokensOut",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1333,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "inTokenParty",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1335,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "outTokenParty",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1337,
            "contract": "contracts/MoonSwapV1.sol:MoonSwap",
            "label": "status",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}